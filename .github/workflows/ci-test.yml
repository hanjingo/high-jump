name: CI Test Pipeline

on:
  push:
    branches: [ test-ci, test-** ]
  pull_request:
    branches: [ test-ci ]
  workflow_dispatch:  # 允许手动触发

env:
  BUILD_TYPE: Debug
  VCPKG_VERSION: '2024.01.12'

jobs:
  # ================================ 基础验证 ================================
  basic-validation:
    name: Basic Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Validate project structure
      run: |
        echo "🔍 Checking project structure..."
        
        # 检查关键文件
        files=(
          "CMakeLists.txt"
          "vcpkg.json" 
          ".clang-format"
          ".clang-tidy"
          "libcpp"
          "tests"
        )
        
        for file in "${files[@]}"; do
          if [ -e "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

    - name: Validate vcpkg configuration
      run: |
        echo "📦 Validating vcpkg configuration..."
        
        # 检查 vcpkg.json 格式
        if jq empty vcpkg.json; then
          echo "✅ vcpkg.json is valid JSON"
          echo "Dependencies count: $(jq '.dependencies | length' vcpkg.json)"
        else
          echo "❌ vcpkg.json is invalid"
          exit 1
        fi

    - name: Install basic tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Quick code quality check
      run: |
        echo "🔍 Running quick code quality checks..."
        
        # 检查代码格式（只检查几个文件）
        find libcpp -name "*.hpp" -type f | head -5 | while read file; do
          if clang-format --dry-run --Werror "$file" 2>/dev/null; then
            echo "✅ Format check passed: $file"
          else
            echo "⚠️ Format issues in: $file"
          fi
        done
        
        # 运行 cppcheck（限制范围）
        find libcpp -name "*.hpp" -type f | head -3 | xargs cppcheck --enable=style --std=c++17 --error-exitcode=0 || true

  # ================================ 快速构建测试 ================================
  quick-build:
    name: Quick Build Test
    needs: basic-validation
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1
      with:
        cmake-version: '3.25'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build libgtest-dev

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake (without vcpkg)
      run: |
        cmake -B build-test \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DBUILD_TEST=OFF \
          -DBUILD_LIB=OFF \
          -DBUILD_EXAMPLE=OFF

    - name: Build project
      run: |
        cmake --build build-test --parallel 2

    - name: Verify build artifacts
      run: |
        echo "📁 Build artifacts:"
        find build-test -type f \( -name "*.a" -o -name "*.lib" -o -name "*.so" -o -name "*.dll" \) | head -10 || echo "No build artifacts found (header-only library)"

  # ================================ 依赖测试 ================================
  dependency-test:
    name: Dependency Test
    needs: basic-validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git checkout ${{ env.VCPKG_VERSION }}
        ./bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV

    - name: Install key dependencies via vcpkg
      run: |
        # 只安装几个关键依赖进行测试
        ${{ env.VCPKG_ROOT }}/vcpkg install gtest fmt spdlog --triplet=x64-linux

    - name: Configure with vcpkg
      run: |
        cmake -B build-vcpkg \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_TEST=ON

    - name: Build with dependencies
      run: |
        cmake --build build-vcpkg --parallel 2

    - name: Check dependency integration
      run: |
        echo "✅ vcpkg dependencies integration test passed"