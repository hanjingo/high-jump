name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, dev, v1.x, ci ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

env:
  BUILD_TYPE: Release

jobs:
  # ================================ Code Quality Checks ================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure environment and install tools
      run: |
        echo "=== Running environment configuration script ==="
        python3 scripts/configure.py --platform=linux --code-quality
        
        echo "=== Verifying code quality tools ==="
        clang-format --version || echo "clang-format not found"
        cppcheck --version || echo "cppcheck not found"
        cpplint --version || echo "cpplint not found"

    - name: Run code quality checks
      working-directory: ${{ github.workspace }}
      run: |
        echo "=== Running cppcheck static analysis ==="
        cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem \
          --error-exitcode=1 --xml hj/ 2> cppcheck-result.xml || true
        
        echo "=== Running clang-format check ==="
        find hj -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | \
        xargs -I{} sh -c 'clang-format --style=file --dry-run "$1" || echo "[WARNING] $1 not clang-formatted"' -- {}
        
        echo "=== Running cpplint check ==="
        find hj -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | \
        xargs cpplint --filter=-build/c++11,-whitespace/braces || true

    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          cppcheck-result.xml
        retention-days: 30

  # ================================ Build (Linux) ================================
  build-linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-22.04
    needs: code-quality
    strategy:
      matrix:
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup virtual display
      run: |
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99.0" >> $GITHUB_ENV

    - name: Configure build environment
      run: |
        echo "=== Running environment configuration script ==="

        # wait for any dpkg locks to clear
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
        python3 scripts/configure.py --platform=linux
        
        # Source environment variables for current session
        if [ -f ~/.bashrc ]; then
          source ~/.bashrc
        fi

        # bash scripts/dpdk.sh  # (disabled for now, re-enable if DPDK is needed)

        # Source environment variables for current session
        if [ -f ~/.bashrc ]; then
          source ~/.bashrc
        fi

        echo "=== Verifying environment setup ==="
        
        # Verify tools are available
        echo "Tool verification:"
        echo "  CMake: $(cmake --version | head -1)"
        echo "  Ninja: $(ninja --version)"
        echo "  GCC: $(gcc --version | head -1)"
        echo "  G++: $(g++ --version | head -1)"
        
        # Check vcpkg
        if [ -d "tools/vcpkg" ]; then
          echo "  vcpkg: $(./tools/vcpkg/vcpkg version | head -1)"
          echo "VCPKG_ROOT=${{ github.workspace }}/tools/vcpkg" >> $GITHUB_ENV
          echo "${{ github.workspace }}/tools/vcpkg" >> $GITHUB_PATH
        fi
        
        # Configure vcpkg binary caching
        export VCPKG_BINARY_SOURCES="clear;x-gha,readwrite"
        echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

    - name: Configure CMake
      env:
        CMAKE_MAKE_PROGRAM: ninja
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: |
        echo "=== Pre-configure disk usage ==="
        df -h
        echo "================================="
        
        echo "=== Running CMake configuration ==="
        
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_TEST=ON \
          -DBUILD_LIB=OFF \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DASAN=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
        echo "=== Post-configure disk usage ==="
        df -h
        echo "=================================="

    - name: Build
      run: |
        echo "=== Pre-build disk usage ==="
        df -h
        echo "============================="
        
        JOBS=$(($(nproc)-1))
        if [ "$JOBS" -lt 1 ]; then JOBS=1; fi
        cmake --build build --config ${{ matrix.build_type }} --parallel $JOBS
        
        echo "=== Post-build disk usage ==="
        df -h
        echo "=============================="

    - name: Run tests
      working-directory: build
      run: |
        ctest --output-on-failure --parallel $(nproc) -C ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-linux-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/compile_commands.json
          build/vcpkg-manifest-install.log
        retention-days: 7

  # ================================ Build (macOS) ================================
  build-macos:
    name: Build and Test (macOS)
    runs-on: macos-13
    needs: code-quality
    strategy:
      matrix:
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check system info
      run: |
        echo "=== System Information ==="
        uname -a
        sysctl hw.model
        sysctl machdep.cpu.brand_string 2>/dev/null || echo "CPU info not available"
        echo "=== Initial disk usage ==="
        df -h
        echo "=========================="

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure build environment (macOS)
      run: |
        echo "=== Setting up macOS build environment ==="
        
        # Set environment variables for macOS
        echo "Setting macOS deployment target..."
        echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
        export MACOSX_DEPLOYMENT_TARGET=10.15
        
        # Install required packages including autoconf-archive
        echo "=== Installing required packages ==="
        brew install automake autoconf-archive || true
        brew unlink automake autoconf 2>/dev/null || true
        brew link --force --overwrite automake autoconf autoconf-archive || true
        
        # Find and fix aclocal - multiple strategies
        echo "=== Finding and fixing aclocal ==="
        
        # Strategy 1: Direct symlink from opt to bin
        if [ -f "/usr/local/opt/automake/bin/aclocal" ] && [ ! -f "/usr/local/bin/aclocal" ]; then
          sudo ln -sf /usr/local/opt/automake/bin/aclocal /usr/local/bin/aclocal
          echo "✓ Created symlink: /usr/local/bin/aclocal -> /usr/local/opt/automake/bin/aclocal"
        fi
        
        # Strategy 2: Find in Cellar and link
        if [ ! -f "/usr/local/bin/aclocal" ]; then
          ACLOCAL_PATH=$(find /usr/local/Cellar/automake*/bin -name aclocal 2>/dev/null | head -1)
          if [ -n "$ACLOCAL_PATH" ] && [ -f "$ACLOCAL_PATH" ]; then
            sudo ln -sf "$ACLOCAL_PATH" /usr/local/bin/aclocal
            echo "✓ Created symlink from Cellar: /usr/local/bin/aclocal -> $ACLOCAL_PATH"
          fi
        fi
        
        # Strategy 3: Copy instead of symlink if symlink fails
        if [ ! -f "/usr/local/bin/aclocal" ]; then
          for ACLOCAL_SOURCE in "/usr/local/opt/automake/bin/aclocal" $(find /usr/local/Cellar/automake*/bin -name aclocal 2>/dev/null); do
            if [ -f "$ACLOCAL_SOURCE" ]; then
              sudo cp "$ACLOCAL_SOURCE" /usr/local/bin/aclocal
              sudo chmod +x /usr/local/bin/aclocal
              echo "✓ Copied aclocal: $ACLOCAL_SOURCE -> /usr/local/bin/aclocal"
              break
            fi
          done
        fi
        
        # Strategy 4: Add automake bin directory to PATH
        export PATH="/usr/local/opt/automake/bin:$PATH"
        echo "PATH=/usr/local/opt/automake/bin:$PATH" >> $GITHUB_ENV
        
        # Strategy 5: Set ACLOCAL environment variable directly
        if [ -f "/usr/local/opt/automake/bin/aclocal" ]; then
          echo "ACLOCAL=/usr/local/opt/automake/bin/aclocal" >> $GITHUB_ENV
          export ACLOCAL="/usr/local/opt/automake/bin/aclocal"
        fi
        
        # Verify aclocal is now accessible
        echo "=== Verifying aclocal ==="
        if command -v aclocal >/dev/null 2>&1; then
          echo "✓ aclocal found at: $(which aclocal)"
          aclocal --version | head -1 || echo "aclocal version check failed"
        else
          echo "✗ aclocal still not found in PATH"
          echo "Listing automake installation:"
          ls -la /usr/local/opt/automake/bin/ 2>/dev/null || echo "automake opt dir not found"
          ls -la /usr/local/Cellar/automake*/bin/ 2>/dev/null || echo "automake cellar dir not found"
        fi
        
        # Also fix other autotools
        echo "=== Fixing other autotools ==="
        for tool in autoconf autoheader autom4te autoreconf libtool libtoolize m4; do
          if [ ! -f "/usr/local/bin/$tool" ]; then
            # Try to find in opt
            if [ -f "/usr/local/opt/autoconf/bin/$tool" ]; then
              sudo ln -sf "/usr/local/opt/autoconf/bin/$tool" "/usr/local/bin/$tool" 2>/dev/null || true
            elif [ -f "/usr/local/opt/libtool/bin/$tool" ]; then
              sudo ln -sf "/usr/local/opt/libtool/bin/$tool" "/usr/local/bin/$tool" 2>/dev/null || true
            elif [ -f "/usr/local/opt/m4/bin/$tool" ]; then
              sudo ln -sf "/usr/local/opt/m4/bin/$tool" "/usr/local/bin/$tool" 2>/dev/null || true
            fi
          fi
        done
        
        # Verify autoconf-archive is available
        echo "=== Verifying autoconf-archive ==="
        if brew list autoconf-archive >/dev/null 2>&1; then
          echo "✓ autoconf-archive is installed"
          
          # Make sure autoconf-archive macros are available to aclocal
          AUTOCONF_ARCHIVE_DIR="/usr/local/share/aclocal"
          if [ -d "$AUTOCONF_ARCHIVE_DIR" ]; then
            echo "✓ autoconf-archive macros found at: $AUTOCONF_ARCHIVE_DIR"
          else
            echo "✗ autoconf-archive macros not found"
          fi
        else
          echo "✗ autoconf-archive not installed"
        fi
        
        # Run environment configuration script
        echo "=== Running environment configuration script ==="
        python3 scripts/configure.py --platform=macos

        bash scripts/dpdk.sh
        
        echo "=== Verifying environment setup ==="
        # Set up critical autotools paths explicitly
        export PATH="/usr/local/bin:/usr/local/opt/autoconf/bin:/usr/local/opt/automake/bin:/usr/local/opt/libtool/bin:/usr/local/opt/m4/bin:/usr/local/opt/gettext/bin:$PATH"
        export ACLOCAL_PATH="/usr/local/share/aclocal:/usr/local/opt/autoconf/share/aclocal:/usr/local/opt/automake/share/aclocal:/usr/local/opt/libtool/share/aclocal:/usr/local/opt/gettext/share/aclocal"
        
        # Add to GitHub ENV for later steps
        echo "PATH=$PATH" >> $GITHUB_ENV
        echo "ACLOCAL_PATH=$ACLOCAL_PATH" >> $GITHUB_ENV
        
        # Final verification of critical autotools
        echo "=== Final autotools verification ==="
        for tool in autoconf automake aclocal autoreconf libtool m4; do
          if command -v $tool >/dev/null 2>&1; then
            echo "✓ $tool: $(which $tool)"
          else
            echo "✗ $tool: not found"
          fi
        done
        
        # Test autoreconf specifically (this is what fails)
        echo "=== Testing autoreconf ==="
        if command -v autoreconf >/dev/null 2>&1; then
          echo "✓ autoreconf found at: $(which autoreconf)"
          # Test in a temporary directory
          mkdir -p /tmp/autotools_test
          cd /tmp/autotools_test
          echo "AC_INIT([test], [1.0])" > configure.ac
          echo "AC_OUTPUT" >> configure.ac
          autoreconf -i 2>/dev/null && echo "✓ autoreconf test passed" || echo "✗ autoreconf test failed"
          cd - >/dev/null
          rm -rf /tmp/autotools_test
        else
          echo "✗ autoreconf not found"
        fi
        
        # Set compiler environment variables
        echo "CC=$(which clang)" >> $GITHUB_ENV
        echo "CXX=$(which clang++)" >> $GITHUB_ENV
        
        # Verify tools are available
        echo "Tool verification:"
        echo "  CMake: $(cmake --version | head -1)"
        echo "  Ninja: $(ninja --version)"
        echo "  Clang: $(clang --version | head -1)"
        echo "  Clang++: $(clang++ --version | head -1)"
        
        # Check vcpkg
        if [ -d "tools/vcpkg" ]; then
          echo "  vcpkg: $(./tools/vcpkg/vcpkg version | head -1)"
          echo "VCPKG_ROOT=${{ github.workspace }}/tools/vcpkg" >> $GITHUB_ENV
          echo "${{ github.workspace }}/tools/vcpkg" >> $GITHUB_PATH
        fi
        
        # Configure vcpkg binary caching
        export VCPKG_BINARY_SOURCES="clear;x-gha,readwrite"
        echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

    - name: Create vcpkg triplet for macOS
      run: |
        echo "=== Creating custom vcpkg triplet ==="
        mkdir -p tools/vcpkg/triplets/community
        
        # Create a custom triplet with relaxed compiler settings
        cat > tools/vcpkg/triplets/community/x64-osx-relaxed.cmake << 'EOF'
        set(VCPKG_TARGET_ARCHITECTURE x64)
        set(VCPKG_CRT_LINKAGE dynamic)
        set(VCPKG_LIBRARY_LINKAGE static)
        set(VCPKG_CMAKE_SYSTEM_NAME Darwin)
        set(VCPKG_OSX_DEPLOYMENT_TARGET "10.15")
        
        # Relax compiler warnings for boost
        set(VCPKG_CXX_FLAGS "-Wno-deprecated -Wno-deprecated-declarations -Wno-enum-constexpr-conversion -Wno-deprecated-builtins")
        set(VCPKG_C_FLAGS "-Wno-deprecated -Wno-deprecated-declarations")
        EOF
        
        echo "Custom triplet created:"
        cat tools/vcpkg/triplets/community/x64-osx-relaxed.cmake

    - name: Configure CMake (macOS)
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
        MACOSX_DEPLOYMENT_TARGET: "10.15"
        ACLOCAL: "/usr/local/bin/aclocal"
        AUTOMAKE: "/usr/local/bin/automake"
        AUTORECONF: "/usr/local/bin/autoreconf"
        LIBTOOL: "/usr/local/bin/libtool"
        M4: "/usr/local/bin/m4"
      run: |
        echo "=== Pre-configure disk usage ==="
        df -h
        echo "================================="
        
        echo "=== Environment Variables ==="
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
        echo "VCPKG_ROOT: $VCPKG_ROOT"
        echo "ACLOCAL: $ACLOCAL"
        echo "PATH: $PATH"
        echo "ACLOCAL_PATH: $ACLOCAL_PATH"
        echo "=============================="
        
        # check autotools
        echo "=== Final autotools check before CMake ==="
        which aclocal || echo "aclocal not in PATH"
        which autoreconf || echo "autoreconf not in PATH"
        ls -la /usr/local/bin/aclocal 2>/dev/null || echo "aclocal not in /usr/local/bin"
        
        echo "=== Running CMake configuration ==="
        
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_TEST=ON \
          -DBUILD_LIB=OFF \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DASAN=OFF \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DCMAKE_MAKE_PROGRAM=$(which ninja) \
          -DVCPKG_TARGET_TRIPLET=x64-osx-relaxed \
          -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations -Wno-enum-constexpr-conversion -Wno-deprecated-builtins" \
          -DCMAKE_C_FLAGS="-Wno-deprecated -Wno-deprecated-declarations"
        
        echo "=== Post-configure disk usage ==="
        df -h
        echo "=================================="

    - name: Build (macOS)
      run: |
        echo "=== Pre-build disk usage ==="
        df -h
        echo "============================="
        
        # Set number of parallel jobs (use fewer cores on macOS to avoid memory issues)
        NPROC=$(sysctl -n hw.ncpu)
        PARALLEL_JOBS=$((NPROC-1))
        if [ "$PARALLEL_JOBS" -lt 1 ]; then PARALLEL_JOBS=1; fi
        echo "Using $PARALLEL_JOBS parallel jobs (total cores: $NPROC)"
              
        cmake --build build --config ${{ matrix.build_type }} --parallel $PARALLEL_JOBS
        
        echo "=== Post-build disk usage ==="
        df -h
        echo "=============================="

    - name: Run tests (macOS)
      working-directory: build
      run: |
        # Use fewer parallel jobs for testing to avoid resource conflicts
        NPROC=$(sysctl -n hw.ncpu)
        PARALLEL_JOBS=$((NPROC > 2 ? 2 : NPROC))
        echo "Running tests with $PARALLEL_JOBS parallel jobs"
        
        ctest --output-on-failure --parallel $PARALLEL_JOBS -C ${{ matrix.build_type }}

    - name: Upload build artifacts (macOS)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-macos-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/compile_commands.json
          build/vcpkg-manifest-install.log
          tools/vcpkg/buildtrees/boost-thread/install-*-out.log
          tools/vcpkg/triplets/community/x64-osx-relaxed.cmake
        retention-days: 7

  # ================================ Build (Windows) ================================
  build-windows:
    name: Build and Test (Windows)
    runs-on: windows-2022
    needs: code-quality
    strategy:
      matrix:
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure build environment
      run: |
        echo "=== Running environment configuration script ==="
        python scripts/configure.py --platform=windows

        echo "=== Verifying environment setup ==="
        echo "Tool verification:"
        echo "  CMake: $(cmake --version | Select-Object -First 1)"
        echo "  Ninja: $(ninja --version)"
        $cl = Get-Command cl.exe -ErrorAction SilentlyContinue
        if ($cl) {
          echo "  MSVC: $($cl.Source)"
          cl.exe
        } else {
          echo "  MSVC: not found in PATH"
        }
        
        echo "VCPKG_ROOT=${{ github.workspace }}/tools/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Configure CMake
      run: |
        echo "=== Running CMake configuration ==="
        cmake -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TEST=ON -DBUILD_LIB=OFF -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: |
        echo "=== Building project ==="
        $env:JOBS = [System.Environment]::ProcessorCount - 1
        if ($env:JOBS -lt 1) { $env:JOBS = 1 }
        cmake --build build --config ${{ matrix.build_type }} --parallel $env:JOBS

    - name: Run tests
      working-directory: build
      run: |
        ctest --output-on-failure --parallel $env:JOBS -C ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-windows-${{ matrix.build_type }}
        path: |
          build/Testing/Temporary/LastTest.log
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/compile_commands.json
        retention-days: 7

  # ================================ Source Code Packaging ================================
  package-source:
    name: Package Source Code
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: |
      always() && 
      (github.ref_type == 'tag' || 
       github.ref == 'refs/heads/main' || 
       github.ref == 'refs/heads/master' ||
       github.ref == 'refs/heads/v1.x')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version information
      id: version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${{ github.ref_name }}"
          echo "Using tag version: $VERSION"
        else
          # Use branch name + short commit hash for non-tag builds
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          VERSION="${BRANCH_NAME}-${SHORT_SHA}"
          echo "Using branch version: $VERSION"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create source package
      run: |
        echo "=== Creating source code package ==="
        
        # Create package directory
        PACKAGE_NAME="high-jump-source-${{ env.VERSION }}"
        mkdir -p packages
        
        # Create exclusion list for files we don't want in source package
        cat > .exclude_list << 'EOF'
        .git
        .github/workflows/cache
        build
        tools/vcpkg/buildtrees
        tools/vcpkg/packages
        tools/vcpkg/downloads
        tools/vcpkg/installed
        *.log
        .DS_Store
        Thumbs.db
        .vscode/settings.json
        .idea
        __pycache__
        *.pyc
        *.pyo
        .pytest_cache
        EOF
        
        # Create source archive
        echo "Creating source archive: ${PACKAGE_NAME}.tar.gz"
        tar --exclude-from=.exclude_list \
            -czf "packages/${PACKAGE_NAME}.tar.gz" \
            --transform "s,^,${PACKAGE_NAME}/," \
            * .gitignore .clang-format 2>/dev/null || \
        tar --exclude-from=.exclude_list \
            -czf "packages/${PACKAGE_NAME}.tar.gz" \
            --transform "s,^,${PACKAGE_NAME}/," \
            *
        
        # Create ZIP archive for Windows users
        echo "Creating ZIP archive: ${PACKAGE_NAME}.zip"
        zip -r "packages/${PACKAGE_NAME}.zip" . \
            -x@.exclude_list \
            -x ".exclude_list"
        
        # Generate checksums
        cd packages
        echo "Generating checksums..."
        sha256sum "${PACKAGE_NAME}.tar.gz" > "${PACKAGE_NAME}.tar.gz.sha256"
        sha256sum "${PACKAGE_NAME}.zip" > "${PACKAGE_NAME}.zip.sha256"
        
        # Display package info
        echo "=== Package Information ==="
        ls -lh
        echo "=========================="
        
        echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT

    - name: Upload packages to GitHub Packages (Generic)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGE_NAME: ${{ steps.version.outputs.package_name || format('high-jump-source-{0}', env.VERSION) }}
      run: |
        echo "=== Uploading packages to GitHub Packages ==="
        
        cd packages
        
        # Upload tar.gz package
        echo "Uploading ${PACKAGE_NAME}.tar.gz..."
        curl -X PUT \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/gzip" \
          --data-binary "@${PACKAGE_NAME}.tar.gz" \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/download/high-jump-source/${{ env.VERSION }}/${PACKAGE_NAME}.tar.gz"
        
        # Upload ZIP package
        echo "Uploading ${PACKAGE_NAME}.zip..."
        curl -X PUT \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary "@${PACKAGE_NAME}.zip" \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/download/high-jump-source/${{ env.VERSION }}/${PACKAGE_NAME}.zip"
        
        # Upload checksums
        echo "Uploading checksums..."
        curl -X PUT \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: text/plain" \
          --data-binary "@${PACKAGE_NAME}.tar.gz.sha256" \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/download/high-jump-source/${{ env.VERSION }}/${PACKAGE_NAME}.tar.gz.sha256"
          
        curl -X PUT \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: text/plain" \
          --data-binary "@${PACKAGE_NAME}.zip.sha256" \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/download/high-jump-source/${{ env.VERSION }}/${PACKAGE_NAME}.zip.sha256"
        
        echo "=== Package upload completed ==="

    - name: Create GitHub Release (for tags)
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          packages/high-jump-source-${{ env.VERSION }}.tar.gz
          packages/high-jump-source-${{ env.VERSION }}.zip
          packages/high-jump-source-${{ env.VERSION }}.tar.gz.sha256
          packages/high-jump-source-${{ env.VERSION }}.zip.sha256
        body: |
          ## High Jump ${{ env.VERSION }}
          
          ### Source Code Packages
          - `high-jump-source-${{ env.VERSION }}.tar.gz` - Source code archive (Linux/macOS)
          - `high-jump-source-${{ env.VERSION }}.zip` - Source code archive (Windows)
          - SHA256 checksums are provided for verification
          
          ### Build Status
          - ✅ Linux Build: ${{ needs.build-linux.result }}
          - ✅ macOS Build: ${{ needs.build-macos.result }}  
          - ✅ Windows Build: ${{ needs.build-windows.result }}
          
          Generated from commit: ${{ github.sha }}
        draft: false
        prerelease: ${{ contains(env.VERSION, 'beta') || contains(env.VERSION, 'alpha') || contains(env.VERSION, 'rc') }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-packages-${{ env.VERSION }}
        path: packages/
        retention-days: 30

  # ================================ Build Summary ================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows, package-source]
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "=== Build Summary ==="
        echo "Linux build: ${{ needs.build-linux.result }}"
        echo "macOS build: ${{ needs.build-macos.result }}"
        echo "Windows build: ${{ needs.build-windows.result }}"
        echo "Source packaging: ${{ needs.package-source.result }}"
        echo "===================="

        # Set overall status
        success_count=0
        total_count=3  # Only count the main build jobs, not packaging

        if [[ "${{ needs.build-linux.result }}" == "success" ]]; then
          success_count=$((success_count + 1))
        fi

        if [[ "${{ needs.build-macos.result }}" == "success" ]]; then
          success_count=$((success_count + 1))
        fi

        if [[ "${{ needs.build-windows.result }}" == "success" ]]; then
          success_count=$((success_count + 1))
        fi

        echo "Successful builds: $success_count/$total_count"

        if [[ $success_count -eq $total_count ]]; then
          echo "All builds passed!"
          exit 0
        elif [[ $success_count -eq 0 ]]; then
          echo "All builds failed!"
          exit 1
        else
          echo "Some builds failed!"
          exit 1
        fi