#!/usr/bin/env pwsh
# Cross-platform C++ code formatting script for Windows (PowerShell)

<#
.SYNOPSIS
    Format C++ code using clang-format (fully based on format.sh logic)
.DESCRIPTION
    Supports argument parsing, file selection, format checking and fixing, verbose output, .h file special handling, auto-generated file skipping, detailed error reporting and statistics.
#>

param(
    [Parameter(ValueFromRemainingArguments=$true)]
    [string[]]$Args
)

function Show-Usage {
    Write-Host @"
Usage: ./format.ps1 [OPTIONS] [FILES...]

Format C++ code using clang-format

Options:
    -c, --check     Only check formatting without making changes
    -h, --help      Show this help message
    -v, --verbose   Enable verbose output

Arguments:
    FILES...        Specific files to format (optional, defaults to all C++ files)

Examples:
    ./format.ps1                              Format all C++ files
    ./format.ps1 --check                      Check formatting of all files
    ./format.ps1 -c -v                        Check formatting with verbose output
    ./format.ps1 file1.hpp file2.cpp          Format specific files
    ./format.ps1 --check --verbose file.hpp   Check specific file with details
"@
}

# Argument parsing
$CheckOnly = $false
$Verbose = $false
$SpecifiedFiles = @()
foreach ($arg in $Args) {
    switch ($arg) {
        '-c' { $CheckOnly = $true }
        '--check' { $CheckOnly = $true }
        '-v' { $Verbose = $true }
        '--verbose' { $Verbose = $true }
        '-h' { Show-Usage; exit 0 }
        '--help' { Show-Usage; exit 0 }
        default {
            if ($arg.StartsWith('-')) {
                Write-Host "Unknown option: $arg" -ForegroundColor Red
                Show-Usage
                exit 1
            } else {
                $SpecifiedFiles += $arg
            }
        }
    }
}

function Log-Verbose($msg) {
    if ($Verbose) { Write-Host $msg }
}

# Patterns for auto-generated files to skip
$SkipPatterns = @('*.pb.h','*.pb.cc','*.pb.c','*.grpc.pb.h','*.grpc.pb.cc','*.grpc.pb.c','*_generated.h')
function Is-AutoGeneratedFile($file) {
    foreach ($pat in $SkipPatterns) {
        if ($file -like $pat) { return $true }
    }
    return $false
}

# Ensure we are in the project root
if (!(Test-Path ".clang-format")) {
    Write-Host "Error: Must be run from project root (directory containing .clang-format)" -ForegroundColor Red
    exit 1
}
Log-Verbose "Project root: $(Get-Location)"

# Check clang-format availability
try {
    $ver = clang-format --version
    Log-Verbose "Using: $ver"
} catch {
    Write-Host "Error: clang-format not found. Please install clang-format." -ForegroundColor Red
    Write-Host "Windows: choco install llvm or manually install clang-format.exe"
    exit 1
}

# Collect files to process
$files = @()
if ($SpecifiedFiles.Count -gt 0) {
    Log-Verbose "Processing specified files..."
    foreach ($file in $SpecifiedFiles) {
        if (Test-Path $file) {
            switch -regex ($file) {
                ".*\.cpp$|.*\.hpp$|.*\.h$|.*\.cc$|.*\.cxx$" {
                    if (-not (Is-AutoGeneratedFile $file)) {
                        $files += $file
                    } else {
                        Log-Verbose "Skipping auto-generated file: $file"
                    }
                }
                default { Write-Host "Warning: Skipping non-C++ file: $file" -ForegroundColor Yellow }
            }
        } else {
            Write-Host "Error: File not found: $file" -ForegroundColor Red
            exit 1
        }
    }
} else {
    Log-Verbose "Searching for C++ files in hj/ and tests/ directories..."
    $allFiles = Get-ChildItem -Recurse -Path "hj", "tests" -Include "*.cpp", "*.hpp", "*.h", "*.cc", "*.cxx" -File | ForEach-Object { $_.FullName }
    foreach ($file in $allFiles) {
        if (-not (Is-AutoGeneratedFile $file)) {
            $files += $file
        } else {
            Log-Verbose "Skipping auto-generated file: $file"
        }
    }
}

if ($files.Count -eq 0) {
    Write-Host "Warning: No C++ files found" -ForegroundColor Yellow
    exit 0
}

Write-Host "Found $($files.Count) C++ files (excluding auto-generated files)"
if ($Verbose) {
    Write-Host "Files to process:"
    $files | ForEach-Object { Write-Host "  $_" }
}

if ($CheckOnly) {
    Write-Host "Checking code formatting..." -ForegroundColor Blue
    $hasErrors = $false
    $errorFiles = @()
    foreach ($file in $files) {
        Log-Verbose "Checking: $file"
        $result = clang-format --style=file --dry-run --Werror $file 2>&1
        if ($LASTEXITCODE -ne 0) {
            $hasErrors = $true
            $errorFiles += $file
            Write-Host "Format issues in $(Split-Path $file -Leaf):" -ForegroundColor Red
            if ($result) {
                $lines = $result -split "`n"
                $lines | Select-Object -First 5 | ForEach-Object { Write-Host "    $_" -ForegroundColor Yellow }
                if ($lines.Count -gt 5) {
                    Write-Host "  ... (showing first 5 issue locations, total $($lines.Count) format issues)" -ForegroundColor Yellow
                }
            } else {
                Write-Host "  File needs formatting (unable to show details)" -ForegroundColor Yellow
            }
        }
    }
    if ($hasErrors) {
        Write-Host ""; Write-Host "Code formatting issues found in $($errorFiles.Count) files!" -ForegroundColor Red
        if ($Verbose) {
            Write-Host "Files with issues:"
            $errorFiles | ForEach-Object { Write-Host "  $_" }
        }
        Write-Host ""; Write-Host "To fix these issues, run: ./format.ps1" -ForegroundColor Blue
        exit 1
    } else {
        Write-Host "All files are properly formatted!" -ForegroundColor Green
        exit 0
    }
} else {
    Write-Host "Applying code formatting..." -ForegroundColor Blue
    $modifiedFiles = @()
    foreach ($file in $files) {
        Log-Verbose "Formatting: $file"
        $tempBackup = [System.IO.Path]::GetTempFileName()
        Copy-Item $file $tempBackup
        clang-format --style=file -i $file
        if ($LASTEXITCODE -eq 0) {
            $contentNew = Get-Content $file
            $contentOld = Get-Content $tempBackup
            if ($null -ne $contentNew -and $null -ne $contentOld) {
                $diff = Compare-Object $contentNew $contentOld
                if ($diff -or ($contentNew -ne $contentOld)) {
                    Write-Host "Formatted: $file"
                    $modifiedFiles += $file
                } else {
                    Log-Verbose "No changes: $file"
                }
            } else {
                Log-Verbose "No changes: $file (empty file)"
            }
        } else {
            Write-Host "Error formatting: $file" -ForegroundColor Red
        }
        Remove-Item $tempBackup -Force
    }
    Write-Host ""
    if ($modifiedFiles.Count -gt 0) {
        Write-Host "Code formatting complete! $($modifiedFiles.Count) files were modified." -ForegroundColor Green
    } else {
        Write-Host "Code formatting complete! All files were already properly formatted." -ForegroundColor Green
    }
}